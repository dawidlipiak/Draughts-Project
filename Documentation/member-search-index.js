memberSearchIndex = [{"p":"org.example","c":"Game","l":"ACTIVE"},{"p":"org.example","c":"GameController","l":"ACTIVE"},{"p":"org.example.Strategy","c":"GermanStrategy","l":"addlegalJumps(ArrayList<Movement>, int, Pawn[][], Player, int, int)","u":"addlegalJumps(java.util.ArrayList,int,org.example.Pawn[][],org.example.Player,int,int)"},{"p":"org.example.Strategy","c":"ItalianStrategy","l":"addlegalJumps(ArrayList<Movement>, int, Pawn[][], Player, int, int)","u":"addlegalJumps(java.util.ArrayList,int,org.example.Pawn[][],org.example.Player,int,int)"},{"p":"org.example.Strategy","c":"MovesStrategy","l":"addlegalJumps(ArrayList<Movement>, int, Pawn[][], Player, int, int)","u":"addlegalJumps(java.util.ArrayList,int,org.example.Pawn[][],org.example.Player,int,int)"},{"p":"org.example.Strategy","c":"SpanishStrategy","l":"addlegalJumps(ArrayList<Movement>, int, Pawn[][], Player, int, int)","u":"addlegalJumps(java.util.ArrayList,int,org.example.Pawn[][],org.example.Player,int,int)"},{"p":"org.example.Strategy","c":"GermanStrategy","l":"addlegalMoves(ArrayList<Movement>, int, Pawn[][], Player, int, int)","u":"addlegalMoves(java.util.ArrayList,int,org.example.Pawn[][],org.example.Player,int,int)"},{"p":"org.example.Strategy","c":"ItalianStrategy","l":"addlegalMoves(ArrayList<Movement>, int, Pawn[][], Player, int, int)","u":"addlegalMoves(java.util.ArrayList,int,org.example.Pawn[][],org.example.Player,int,int)"},{"p":"org.example.Strategy","c":"MovesStrategy","l":"addlegalMoves(ArrayList<Movement>, int, Pawn[][], Player, int, int)","u":"addlegalMoves(java.util.ArrayList,int,org.example.Pawn[][],org.example.Player,int,int)"},{"p":"org.example.Strategy","c":"SpanishStrategy","l":"addlegalMoves(ArrayList<Movement>, int, Pawn[][], Player, int, int)","u":"addlegalMoves(java.util.ArrayList,int,org.example.Pawn[][],org.example.Player,int,int)"},{"p":"org.example","c":"Version","l":"choosingVersion()"},{"p":"org.example","c":"Draughts","l":"Draughts()","u":"%3Cinit%3E()"},{"p":"org.example","c":"DraughtsServer","l":"DraughtsServer()","u":"%3Cinit%3E()"},{"p":"org.example","c":"Game","l":"drawBoard()"},{"p":"org.example","c":"PawnState","l":"EMPTY"},{"p":"org.example","c":"Game","l":"Game(Canvas, int, int, Label, GameController)","u":"%3Cinit%3E(javafx.scene.canvas.Canvas,int,int,javafx.scene.control.Label,org.example.GameController)"},{"p":"org.example","c":"GameController","l":"GameController(int, Label, Stage)","u":"%3Cinit%3E(int,javafx.scene.control.Label,javafx.stage.Stage)"},{"p":"org.example","c":"Game","l":"gameSetup(Player)","u":"gameSetup(org.example.Player)"},{"p":"org.example.Strategy","c":"GermanStrategy","l":"GermanStrategy(int)","u":"%3Cinit%3E(int)"},{"p":"org.example","c":"Version","l":"getChosenVersion()"},{"p":"org.example","c":"Pawn","l":"getColor()"},{"p":"org.example","c":"Player","l":"getColor()"},{"p":"org.example","c":"Game","l":"getCurrentPlayer()"},{"p":"org.example","c":"Movement","l":"getFromCol()"},{"p":"org.example","c":"Movement","l":"getFromRow()"},{"p":"org.example.Strategy","c":"GermanStrategy","l":"getLegalJumpsFrom(int, int, Player, Pawn[][])","u":"getLegalJumpsFrom(int,int,org.example.Player,org.example.Pawn[][])"},{"p":"org.example.Strategy","c":"ItalianStrategy","l":"getLegalJumpsFrom(int, int, Player, Pawn[][])","u":"getLegalJumpsFrom(int,int,org.example.Player,org.example.Pawn[][])"},{"p":"org.example.Strategy","c":"MovesStrategy","l":"getLegalJumpsFrom(int, int, Player, Pawn[][])","u":"getLegalJumpsFrom(int,int,org.example.Player,org.example.Pawn[][])"},{"p":"org.example.Strategy","c":"SpanishStrategy","l":"getLegalJumpsFrom(int, int, Player, Pawn[][])","u":"getLegalJumpsFrom(int,int,org.example.Player,org.example.Pawn[][])"},{"p":"org.example.Strategy","c":"GermanStrategy","l":"getLegalMoves(Player, Pawn[][])","u":"getLegalMoves(org.example.Player,org.example.Pawn[][])"},{"p":"org.example.Strategy","c":"ItalianStrategy","l":"getLegalMoves(Player, Pawn[][])","u":"getLegalMoves(org.example.Player,org.example.Pawn[][])"},{"p":"org.example.Strategy","c":"MovesStrategy","l":"getLegalMoves(Player, Pawn[][])","u":"getLegalMoves(org.example.Player,org.example.Pawn[][])"},{"p":"org.example.Strategy","c":"SpanishStrategy","l":"getLegalMoves(Player, Pawn[][])","u":"getLegalMoves(org.example.Player,org.example.Pawn[][])"},{"p":"org.example","c":"Pawn","l":"getState()"},{"p":"org.example","c":"Version","l":"getStrategy()"},{"p":"org.example","c":"Movement","l":"getToCol()"},{"p":"org.example","c":"Movement","l":"getToRow()"},{"p":"org.example","c":"Game","l":"getTurnMade()"},{"p":"org.example","c":"Player","l":"isFirstPlayer()"},{"p":"org.example","c":"Movement","l":"isJump()"},{"p":"org.example.Strategy","c":"ItalianStrategy","l":"ItalianStrategy(int)","u":"%3Cinit%3E(int)"},{"p":"org.example","c":"PawnState","l":"KING"},{"p":"org.example.Strategy","c":"GermanStrategy","l":"legalJump(Player, Pawn[][], int, int, ArrayList<Integer>, ArrayList<Integer>, int, int)","u":"legalJump(org.example.Player,org.example.Pawn[][],int,int,java.util.ArrayList,java.util.ArrayList,int,int)"},{"p":"org.example.Strategy","c":"ItalianStrategy","l":"legalJump(Player, Pawn[][], int, int, ArrayList<Integer>, ArrayList<Integer>, int, int)","u":"legalJump(org.example.Player,org.example.Pawn[][],int,int,java.util.ArrayList,java.util.ArrayList,int,int)"},{"p":"org.example.Strategy","c":"MovesStrategy","l":"legalJump(Player, Pawn[][], int, int, ArrayList<Integer>, ArrayList<Integer>, int, int)","u":"legalJump(org.example.Player,org.example.Pawn[][],int,int,java.util.ArrayList,java.util.ArrayList,int,int)"},{"p":"org.example.Strategy","c":"SpanishStrategy","l":"legalJump(Player, Pawn[][], int, int, ArrayList<Integer>, ArrayList<Integer>, int, int)","u":"legalJump(org.example.Player,org.example.Pawn[][],int,int,java.util.ArrayList,java.util.ArrayList,int,int)"},{"p":"org.example.Strategy","c":"GermanStrategy","l":"legalMove(Player, Pawn[][], int, int, ArrayList<Integer>, ArrayList<Integer>, int, int)","u":"legalMove(org.example.Player,org.example.Pawn[][],int,int,java.util.ArrayList,java.util.ArrayList,int,int)"},{"p":"org.example.Strategy","c":"ItalianStrategy","l":"legalMove(Player, Pawn[][], int, int, ArrayList<Integer>, ArrayList<Integer>, int, int)","u":"legalMove(org.example.Player,org.example.Pawn[][],int,int,java.util.ArrayList,java.util.ArrayList,int,int)"},{"p":"org.example.Strategy","c":"MovesStrategy","l":"legalMove(Player, Pawn[][], int, int, ArrayList<Integer>, ArrayList<Integer>, int, int)","u":"legalMove(org.example.Player,org.example.Pawn[][],int,int,java.util.ArrayList,java.util.ArrayList,int,int)"},{"p":"org.example.Strategy","c":"SpanishStrategy","l":"legalMove(Player, Pawn[][], int, int, ArrayList<Integer>, ArrayList<Integer>, int, int)","u":"legalMove(org.example.Player,org.example.Pawn[][],int,int,java.util.ArrayList,java.util.ArrayList,int,int)"},{"p":"<Unnamed>","c":"TestGermanStrategy","l":"legalMoveTestBeat()"},{"p":"<Unnamed>","c":"TestItalianStrategy","l":"legalMoveTestBeat()"},{"p":"<Unnamed>","c":"TestSpanishStrategy","l":"legalMoveTestBeat()"},{"p":"<Unnamed>","c":"TestGermanStrategy","l":"legalMoveTestForMovesBack()"},{"p":"<Unnamed>","c":"TestItalianStrategy","l":"legalMoveTestForMovesBack()"},{"p":"<Unnamed>","c":"TestSpanishStrategy","l":"legalMoveTestForMovesBack()"},{"p":"<Unnamed>","c":"TestGermanStrategy","l":"legalMoveTestForMovesBack2()"},{"p":"<Unnamed>","c":"TestItalianStrategy","l":"legalMoveTestForMovesBack2()"},{"p":"<Unnamed>","c":"TestSpanishStrategy","l":"legalMoveTestForMovesBack2()"},{"p":"<Unnamed>","c":"TestGermanStrategy","l":"legalMoveTestForOnePawn()"},{"p":"<Unnamed>","c":"TestItalianStrategy","l":"legalMoveTestForOnePawn()"},{"p":"<Unnamed>","c":"TestSpanishStrategy","l":"legalMoveTestForOnePawn()"},{"p":"<Unnamed>","c":"TestGermanStrategy","l":"legalMoveTestNoMoves()"},{"p":"<Unnamed>","c":"TestItalianStrategy","l":"legalMoveTestNoMoves()"},{"p":"<Unnamed>","c":"TestSpanishStrategy","l":"legalMoveTestNoMoves()"},{"p":"<Unnamed>","c":"TestGermanStrategy","l":"legalMoveTestTwoLinesOfPawns()"},{"p":"<Unnamed>","c":"TestItalianStrategy","l":"legalMoveTestTwoLinesOfPawns()"},{"p":"<Unnamed>","c":"TestSpanishStrategy","l":"legalMoveTestTwoLinesOfPawns()"},{"p":"<Unnamed>","c":"TestGermanStrategy","l":"legalMoveTestWithOneKing()"},{"p":"<Unnamed>","c":"TestItalianStrategy","l":"legalMoveTestWithOneKing()"},{"p":"<Unnamed>","c":"TestSpanishStrategy","l":"legalMoveTestWithOneKing()"},{"p":"<Unnamed>","c":"TestGermanStrategy","l":"legalMoveTestWithOneKing2()"},{"p":"<Unnamed>","c":"TestItalianStrategy","l":"legalMoveTestWithOneKing2()"},{"p":"<Unnamed>","c":"TestSpanishStrategy","l":"legalMoveTestWithOneKing2()"},{"p":"org.example","c":"DraughtsServer","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"<Unnamed>","c":"TestRunner","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"<Unnamed>","c":"TestMovement","l":"makeJump()"},{"p":"<Unnamed>","c":"TestMovement","l":"makeMove()"},{"p":"org.example","c":"Movement","l":"makeMove(Pawn[][])","u":"makeMove(org.example.Pawn[][])"},{"p":"org.example","c":"Game","l":"makeReceivedMove(boolean, Movement)","u":"makeReceivedMove(boolean,org.example.Movement)"},{"p":"org.example","c":"GameController","l":"mousePressed(MouseEvent)","u":"mousePressed(javafx.scene.input.MouseEvent)"},{"p":"org.example","c":"Movement","l":"Movement(int, int, int, int)","u":"%3Cinit%3E(int,int,int,int)"},{"p":"org.example","c":"Game","l":"NONACTIVE"},{"p":"org.example","c":"GameController","l":"NONACTIVE"},{"p":"org.example","c":"PawnState","l":"NORMAL"},{"p":"org.example","c":"Pawn","l":"Pawn(Color, int, int)","u":"%3Cinit%3E(javafx.scene.paint.Color,int,int)"},{"p":"org.example","c":"Player","l":"Player(int, boolean)","u":"%3Cinit%3E(int,boolean)"},{"p":"org.example","c":"Game","l":"playerTurn(int, int)","u":"playerTurn(int,int)"},{"p":"org.example","c":"Game","l":"rewindBoard()"},{"p":"org.example","c":"GameController","l":"run()"},{"p":"org.example","c":"GameController","l":"send(String)","u":"send(java.lang.String)"},{"p":"org.example","c":"Pawn","l":"setColor(Color)","u":"setColor(javafx.scene.paint.Color)"},{"p":"org.example","c":"Game","l":"setCurrentPlayer(Player)","u":"setCurrentPlayer(org.example.Player)"},{"p":"org.example","c":"DraughtsServer","l":"setPawnsPositions(int, Pawn[][])","u":"setPawnsPositions(int,org.example.Pawn[][])"},{"p":"org.example","c":"Game","l":"setPositions()"},{"p":"org.example","c":"Game","l":"setPROMPT(String)","u":"setPROMPT(java.lang.String)"},{"p":"org.example","c":"Pawn","l":"setState(PawnState)","u":"setState(org.example.PawnState)"},{"p":"org.example","c":"Game","l":"setStrategy(MovesStrategy)","u":"setStrategy(org.example.Strategy.MovesStrategy)"},{"p":"org.example","c":"Game","l":"setTurnMade(int)"},{"p":"org.example","c":"Version","l":"setUp()"},{"p":"<Unnamed>","c":"TestGermanStrategy","l":"setUp()"},{"p":"<Unnamed>","c":"TestItalianStrategy","l":"setUp()"},{"p":"<Unnamed>","c":"TestMovement","l":"setUp()"},{"p":"<Unnamed>","c":"TestSpanishStrategy","l":"setUp()"},{"p":"org.example","c":"Version","l":"setVersion(String)","u":"setVersion(java.lang.String)"},{"p":"org.example.Strategy","c":"SpanishStrategy","l":"SpanishStrategy(int)","u":"%3Cinit%3E(int)"},{"p":"org.example","c":"Draughts","l":"start(Stage)","u":"start(javafx.stage.Stage)"},{"p":"<Unnamed>","c":"TestPlayer","l":"testConstructor()"},{"p":"<Unnamed>","c":"TestGermanStrategy","l":"TestGermanStrategy()","u":"%3Cinit%3E()"},{"p":"<Unnamed>","c":"TestItalianStrategy","l":"TestItalianStrategy()","u":"%3Cinit%3E()"},{"p":"<Unnamed>","c":"TestMovement","l":"TestMovement()","u":"%3Cinit%3E()"},{"p":"<Unnamed>","c":"TestPawn","l":"TestPawn()","u":"%3Cinit%3E()"},{"p":"<Unnamed>","c":"TestPawn","l":"testPawnSetColor()"},{"p":"<Unnamed>","c":"TestPawn","l":"testPawnSetState()"},{"p":"<Unnamed>","c":"TestPlayer","l":"TestPlayer()","u":"%3Cinit%3E()"},{"p":"<Unnamed>","c":"TestRunner","l":"TestRunner()","u":"%3Cinit%3E()"},{"p":"<Unnamed>","c":"TestPlayer","l":"testSetPlayerColor()"},{"p":"<Unnamed>","c":"TestSpanishStrategy","l":"TestSpanishStrategy()","u":"%3Cinit%3E()"},{"p":"org.example","c":"PawnState","l":"valueOf(String)","u":"valueOf(java.lang.String)"},{"p":"org.example","c":"PawnState","l":"values()"},{"p":"org.example","c":"Version","l":"Version(Stage)","u":"%3Cinit%3E(javafx.stage.Stage)"}];updateSearchResults();